// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.7.1
// source: profile.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProfileVariable int32

const (
	ProfileVariable_MemProfileRate       ProfileVariable = 0
	ProfileVariable_CPUProfileRate       ProfileVariable = 1
	ProfileVariable_MutexProfileFraction ProfileVariable = 2
	ProfileVariable_BlockProfileRate     ProfileVariable = 3
)

// Enum value maps for ProfileVariable.
var (
	ProfileVariable_name = map[int32]string{
		0: "MemProfileRate",
		1: "CPUProfileRate",
		2: "MutexProfileFraction",
		3: "BlockProfileRate",
	}
	ProfileVariable_value = map[string]int32{
		"MemProfileRate":       0,
		"CPUProfileRate":       1,
		"MutexProfileFraction": 2,
		"BlockProfileRate":     3,
	}
)

func (x ProfileVariable) Enum() *ProfileVariable {
	p := new(ProfileVariable)
	*p = x
	return p
}

func (x ProfileVariable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileVariable) Descriptor() protoreflect.EnumDescriptor {
	return file_profile_proto_enumTypes[0].Descriptor()
}

func (ProfileVariable) Type() protoreflect.EnumType {
	return &file_profile_proto_enumTypes[0]
}

func (x ProfileVariable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileVariable.Descriptor instead.
func (ProfileVariable) EnumDescriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{0}
}

type LookupProfile int32

const (
	LookupProfile_profileTypeHeap         LookupProfile = 0
	LookupProfile_profileTypeMutex        LookupProfile = 1
	LookupProfile_profileTypeBlock        LookupProfile = 2
	LookupProfile_profileTypeThreadCreate LookupProfile = 3
	LookupProfile_profileTypeGoRoutine    LookupProfile = 4
)

// Enum value maps for LookupProfile.
var (
	LookupProfile_name = map[int32]string{
		0: "profileTypeHeap",
		1: "profileTypeMutex",
		2: "profileTypeBlock",
		3: "profileTypeThreadCreate",
		4: "profileTypeGoRoutine",
	}
	LookupProfile_value = map[string]int32{
		"profileTypeHeap":         0,
		"profileTypeMutex":        1,
		"profileTypeBlock":        2,
		"profileTypeThreadCreate": 3,
		"profileTypeGoRoutine":    4,
	}
)

func (x LookupProfile) Enum() *LookupProfile {
	p := new(LookupProfile)
	*p = x
	return p
}

func (x LookupProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookupProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_profile_proto_enumTypes[1].Descriptor()
}

func (LookupProfile) Type() protoreflect.EnumType {
	return &file_profile_proto_enumTypes[1]
}

func (x LookupProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookupProfile.Descriptor instead.
func (LookupProfile) EnumDescriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{1}
}

type NonLookupProfile int32

const (
	NonLookupProfile_profileTypeCPU   NonLookupProfile = 0
	NonLookupProfile_profileTypeTrace NonLookupProfile = 1
)

// Enum value maps for NonLookupProfile.
var (
	NonLookupProfile_name = map[int32]string{
		0: "profileTypeCPU",
		1: "profileTypeTrace",
	}
	NonLookupProfile_value = map[string]int32{
		"profileTypeCPU":   0,
		"profileTypeTrace": 1,
	}
)

func (x NonLookupProfile) Enum() *NonLookupProfile {
	p := new(NonLookupProfile)
	*p = x
	return p
}

func (x NonLookupProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NonLookupProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_profile_proto_enumTypes[2].Descriptor()
}

func (NonLookupProfile) Type() protoreflect.EnumType {
	return &file_profile_proto_enumTypes[2]
}

func (x NonLookupProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NonLookupProfile.Descriptor instead.
func (NonLookupProfile) EnumDescriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{2}
}

type FileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{0}
}

func (x *FileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type StringType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *StringType) Reset() {
	*x = StringType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringType) ProtoMessage() {}

func (x *StringType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringType.ProtoReflect.Descriptor instead.
func (*StringType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{1}
}

func (x *StringType) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type IntType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *IntType) Reset() {
	*x = IntType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntType) ProtoMessage() {}

func (x *IntType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntType.ProtoReflect.Descriptor instead.
func (*IntType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{2}
}

func (x *IntType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type LookupProfileType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile LookupProfile `protobuf:"varint,1,opt,name=Profile,proto3,enum=proto.LookupProfile" json:"Profile,omitempty"`
}

func (x *LookupProfileType) Reset() {
	*x = LookupProfileType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupProfileType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupProfileType) ProtoMessage() {}

func (x *LookupProfileType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupProfileType.ProtoReflect.Descriptor instead.
func (*LookupProfileType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{3}
}

func (x *LookupProfileType) GetProfile() LookupProfile {
	if x != nil {
		return x.Profile
	}
	return LookupProfile_profileTypeHeap
}

type NonLookupProfileType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile NonLookupProfile `protobuf:"varint,1,opt,name=Profile,proto3,enum=proto.NonLookupProfile" json:"Profile,omitempty"`
}

func (x *NonLookupProfileType) Reset() {
	*x = NonLookupProfileType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonLookupProfileType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonLookupProfileType) ProtoMessage() {}

func (x *NonLookupProfileType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonLookupProfileType.ProtoReflect.Descriptor instead.
func (*NonLookupProfileType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{4}
}

func (x *NonLookupProfileType) GetProfile() NonLookupProfile {
	if x != nil {
		return x.Profile
	}
	return NonLookupProfile_profileTypeCPU
}

type SetProfileInputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable ProfileVariable `protobuf:"varint,1,opt,name=Variable,proto3,enum=proto.ProfileVariable" json:"Variable,omitempty"`
	Rate     int32           `protobuf:"varint,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
}

func (x *SetProfileInputType) Reset() {
	*x = SetProfileInputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileInputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileInputType) ProtoMessage() {}

func (x *SetProfileInputType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileInputType.ProtoReflect.Descriptor instead.
func (*SetProfileInputType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{5}
}

func (x *SetProfileInputType) GetVariable() ProfileVariable {
	if x != nil {
		return x.Variable
	}
	return ProfileVariable_MemProfileRate
}

func (x *SetProfileInputType) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type ResetProfileInputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable ProfileVariable `protobuf:"varint,1,opt,name=Variable,proto3,enum=proto.ProfileVariable" json:"Variable,omitempty"`
}

func (x *ResetProfileInputType) Reset() {
	*x = ResetProfileInputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetProfileInputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetProfileInputType) ProtoMessage() {}

func (x *ResetProfileInputType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetProfileInputType.ProtoReflect.Descriptor instead.
func (*ResetProfileInputType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{6}
}

func (x *ResetProfileInputType) GetVariable() ProfileVariable {
	if x != nil {
		return x.Variable
	}
	return ProfileVariable_MemProfileRate
}

type LookupProfileInputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileType LookupProfile `protobuf:"varint,1,opt,name=ProfileType,proto3,enum=proto.LookupProfile" json:"ProfileType,omitempty"`
}

func (x *LookupProfileInputType) Reset() {
	*x = LookupProfileInputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupProfileInputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupProfileInputType) ProtoMessage() {}

func (x *LookupProfileInputType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupProfileInputType.ProtoReflect.Descriptor instead.
func (*LookupProfileInputType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{7}
}

func (x *LookupProfileInputType) GetProfileType() LookupProfile {
	if x != nil {
		return x.ProfileType
	}
	return LookupProfile_profileTypeHeap
}

type NonLookupProfileInputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileType NonLookupProfile   `protobuf:"varint,1,opt,name=ProfileType,proto3,enum=proto.NonLookupProfile" json:"ProfileType,omitempty"`
	Duration    *duration.Duration `protobuf:"bytes,2,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (x *NonLookupProfileInputType) Reset() {
	*x = NonLookupProfileInputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonLookupProfileInputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonLookupProfileInputType) ProtoMessage() {}

func (x *NonLookupProfileInputType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonLookupProfileInputType.ProtoReflect.Descriptor instead.
func (*NonLookupProfileInputType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{8}
}

func (x *NonLookupProfileInputType) GetProfileType() NonLookupProfile {
	if x != nil {
		return x.ProfileType
	}
	return NonLookupProfile_profileTypeCPU
}

func (x *NonLookupProfileInputType) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type MemStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alloc        uint64               `protobuf:"varint,1,opt,name=Alloc,proto3" json:"Alloc,omitempty"`
	TotalAlloc   uint64               `protobuf:"varint,2,opt,name=TotalAlloc,proto3" json:"TotalAlloc,omitempty"`
	Sys          uint64               `protobuf:"varint,3,opt,name=Sys,proto3" json:"Sys,omitempty"`
	Lookups      uint64               `protobuf:"varint,4,opt,name=Lookups,proto3" json:"Lookups,omitempty"`
	Mallocs      uint64               `protobuf:"varint,5,opt,name=Mallocs,proto3" json:"Mallocs,omitempty"`
	Frees        uint64               `protobuf:"varint,6,opt,name=Frees,proto3" json:"Frees,omitempty"`
	HeapAlloc    uint64               `protobuf:"varint,7,opt,name=HeapAlloc,proto3" json:"HeapAlloc,omitempty"`
	HeapSys      uint64               `protobuf:"varint,8,opt,name=HeapSys,proto3" json:"HeapSys,omitempty"`
	HeapIdle     uint64               `protobuf:"varint,9,opt,name=HeapIdle,proto3" json:"HeapIdle,omitempty"`
	HeapInuse    uint64               `protobuf:"varint,10,opt,name=HeapInuse,proto3" json:"HeapInuse,omitempty"`
	HeapReleased uint64               `protobuf:"varint,11,opt,name=HeapReleased,proto3" json:"HeapReleased,omitempty"`
	HeapObjects  uint64               `protobuf:"varint,12,opt,name=HeapObjects,proto3" json:"HeapObjects,omitempty"`
	StackInuse   uint64               `protobuf:"varint,13,opt,name=StackInuse,proto3" json:"StackInuse,omitempty"`
	StackSys     uint64               `protobuf:"varint,14,opt,name=StackSys,proto3" json:"StackSys,omitempty"`
	MSpanInuse   uint64               `protobuf:"varint,15,opt,name=MSpanInuse,proto3" json:"MSpanInuse,omitempty"`
	MSpanSys     uint64               `protobuf:"varint,16,opt,name=MSpanSys,proto3" json:"MSpanSys,omitempty"`
	MCacheInuse  uint64               `protobuf:"varint,17,opt,name=MCacheInuse,proto3" json:"MCacheInuse,omitempty"`
	MCacheSys    uint64               `protobuf:"varint,18,opt,name=MCacheSys,proto3" json:"MCacheSys,omitempty"`
	BuckHashSys  uint64               `protobuf:"varint,19,opt,name=BuckHashSys,proto3" json:"BuckHashSys,omitempty"`
	GCSys        uint64               `protobuf:"varint,20,opt,name=GCSys,proto3" json:"GCSys,omitempty"`
	OtherSys     uint64               `protobuf:"varint,21,opt,name=OtherSys,proto3" json:"OtherSys,omitempty"`
	NextGC       uint64               `protobuf:"varint,22,opt,name=NextGC,proto3" json:"NextGC,omitempty"`
	LastGC       *timestamp.Timestamp `protobuf:"bytes,23,opt,name=LastGC,proto3" json:"LastGC,omitempty"`
	PauseTotalNs *duration.Duration   `protobuf:"bytes,24,opt,name=PauseTotalNs,proto3" json:"PauseTotalNs,omitempty"`
	LastPause    *timestamp.Timestamp `protobuf:"bytes,25,opt,name=LastPause,proto3" json:"LastPause,omitempty"`
	NumGC        uint32               `protobuf:"varint,26,opt,name=NumGC,proto3" json:"NumGC,omitempty"`
	NumForcedGC  uint32               `protobuf:"varint,27,opt,name=NumForcedGC,proto3" json:"NumForcedGC,omitempty"`
}

func (x *MemStats) Reset() {
	*x = MemStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemStats) ProtoMessage() {}

func (x *MemStats) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemStats.ProtoReflect.Descriptor instead.
func (*MemStats) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{9}
}

func (x *MemStats) GetAlloc() uint64 {
	if x != nil {
		return x.Alloc
	}
	return 0
}

func (x *MemStats) GetTotalAlloc() uint64 {
	if x != nil {
		return x.TotalAlloc
	}
	return 0
}

func (x *MemStats) GetSys() uint64 {
	if x != nil {
		return x.Sys
	}
	return 0
}

func (x *MemStats) GetLookups() uint64 {
	if x != nil {
		return x.Lookups
	}
	return 0
}

func (x *MemStats) GetMallocs() uint64 {
	if x != nil {
		return x.Mallocs
	}
	return 0
}

func (x *MemStats) GetFrees() uint64 {
	if x != nil {
		return x.Frees
	}
	return 0
}

func (x *MemStats) GetHeapAlloc() uint64 {
	if x != nil {
		return x.HeapAlloc
	}
	return 0
}

func (x *MemStats) GetHeapSys() uint64 {
	if x != nil {
		return x.HeapSys
	}
	return 0
}

func (x *MemStats) GetHeapIdle() uint64 {
	if x != nil {
		return x.HeapIdle
	}
	return 0
}

func (x *MemStats) GetHeapInuse() uint64 {
	if x != nil {
		return x.HeapInuse
	}
	return 0
}

func (x *MemStats) GetHeapReleased() uint64 {
	if x != nil {
		return x.HeapReleased
	}
	return 0
}

func (x *MemStats) GetHeapObjects() uint64 {
	if x != nil {
		return x.HeapObjects
	}
	return 0
}

func (x *MemStats) GetStackInuse() uint64 {
	if x != nil {
		return x.StackInuse
	}
	return 0
}

func (x *MemStats) GetStackSys() uint64 {
	if x != nil {
		return x.StackSys
	}
	return 0
}

func (x *MemStats) GetMSpanInuse() uint64 {
	if x != nil {
		return x.MSpanInuse
	}
	return 0
}

func (x *MemStats) GetMSpanSys() uint64 {
	if x != nil {
		return x.MSpanSys
	}
	return 0
}

func (x *MemStats) GetMCacheInuse() uint64 {
	if x != nil {
		return x.MCacheInuse
	}
	return 0
}

func (x *MemStats) GetMCacheSys() uint64 {
	if x != nil {
		return x.MCacheSys
	}
	return 0
}

func (x *MemStats) GetBuckHashSys() uint64 {
	if x != nil {
		return x.BuckHashSys
	}
	return 0
}

func (x *MemStats) GetGCSys() uint64 {
	if x != nil {
		return x.GCSys
	}
	return 0
}

func (x *MemStats) GetOtherSys() uint64 {
	if x != nil {
		return x.OtherSys
	}
	return 0
}

func (x *MemStats) GetNextGC() uint64 {
	if x != nil {
		return x.NextGC
	}
	return 0
}

func (x *MemStats) GetLastGC() *timestamp.Timestamp {
	if x != nil {
		return x.LastGC
	}
	return nil
}

func (x *MemStats) GetPauseTotalNs() *duration.Duration {
	if x != nil {
		return x.PauseTotalNs
	}
	return nil
}

func (x *MemStats) GetLastPause() *timestamp.Timestamp {
	if x != nil {
		return x.LastPause
	}
	return nil
}

func (x *MemStats) GetNumGC() uint32 {
	if x != nil {
		return x.NumGC
	}
	return 0
}

func (x *MemStats) GetNumForcedGC() uint32 {
	if x != nil {
		return x.NumForcedGC
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Size     int64                `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	Mode     uint32               `protobuf:"varint,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	ModeTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=ModeTime,proto3" json:"ModeTime,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{10}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetModeTime() *timestamp.Timestamp {
	if x != nil {
		return x.ModeTime
	}
	return nil
}

type IDName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *IDName) Reset() {
	*x = IDName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDName) ProtoMessage() {}

func (x *IDName) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDName.ProtoReflect.Descriptor instead.
func (*IDName) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{11}
}

func (x *IDName) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *IDName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProcessStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environ         []string  `protobuf:"bytes,1,rep,name=Environ,proto3" json:"Environ,omitempty"`
	Executable      string    `protobuf:"bytes,2,opt,name=Executable,proto3" json:"Executable,omitempty"`
	ExecutableLStat *FileInfo `protobuf:"bytes,3,opt,name=ExecutableLStat,proto3" json:"ExecutableLStat,omitempty"`
	ExecutableStat  *FileInfo `protobuf:"bytes,4,opt,name=ExecutableStat,proto3" json:"ExecutableStat,omitempty"`
	UID             *IDName   `protobuf:"bytes,5,opt,name=UID,proto3" json:"UID,omitempty"`
	GID             *IDName   `protobuf:"bytes,6,opt,name=GID,proto3" json:"GID,omitempty"`
	EUID            *IDName   `protobuf:"bytes,7,opt,name=EUID,proto3" json:"EUID,omitempty"`
	EGID            *IDName   `protobuf:"bytes,8,opt,name=EGID,proto3" json:"EGID,omitempty"`
	Groups          []*IDName `protobuf:"bytes,9,rep,name=Groups,proto3" json:"Groups,omitempty"`
	PageSize        int32     `protobuf:"varint,10,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	PID             int32     `protobuf:"varint,11,opt,name=PID,proto3" json:"PID,omitempty"`
	PPID            int32     `protobuf:"varint,12,opt,name=PPID,proto3" json:"PPID,omitempty"`
	WD              string    `protobuf:"bytes,13,opt,name=WD,proto3" json:"WD,omitempty"`
	Hostname        string    `protobuf:"bytes,14,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	UserCacheDir    string    `protobuf:"bytes,15,opt,name=UserCacheDir,proto3" json:"UserCacheDir,omitempty"`
	UserConfigDir   string    `protobuf:"bytes,16,opt,name=UserConfigDir,proto3" json:"UserConfigDir,omitempty"`
	UserHomeDir     string    `protobuf:"bytes,17,opt,name=UserHomeDir,proto3" json:"UserHomeDir,omitempty"`
}

func (x *ProcessStats) Reset() {
	*x = ProcessStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStats) ProtoMessage() {}

func (x *ProcessStats) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStats.ProtoReflect.Descriptor instead.
func (*ProcessStats) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessStats) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

func (x *ProcessStats) GetExecutable() string {
	if x != nil {
		return x.Executable
	}
	return ""
}

func (x *ProcessStats) GetExecutableLStat() *FileInfo {
	if x != nil {
		return x.ExecutableLStat
	}
	return nil
}

func (x *ProcessStats) GetExecutableStat() *FileInfo {
	if x != nil {
		return x.ExecutableStat
	}
	return nil
}

func (x *ProcessStats) GetUID() *IDName {
	if x != nil {
		return x.UID
	}
	return nil
}

func (x *ProcessStats) GetGID() *IDName {
	if x != nil {
		return x.GID
	}
	return nil
}

func (x *ProcessStats) GetEUID() *IDName {
	if x != nil {
		return x.EUID
	}
	return nil
}

func (x *ProcessStats) GetEGID() *IDName {
	if x != nil {
		return x.EGID
	}
	return nil
}

func (x *ProcessStats) GetGroups() []*IDName {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ProcessStats) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProcessStats) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessStats) GetPPID() int32 {
	if x != nil {
		return x.PPID
	}
	return 0
}

func (x *ProcessStats) GetWD() string {
	if x != nil {
		return x.WD
	}
	return ""
}

func (x *ProcessStats) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ProcessStats) GetUserCacheDir() string {
	if x != nil {
		return x.UserCacheDir
	}
	return ""
}

func (x *ProcessStats) GetUserConfigDir() string {
	if x != nil {
		return x.UserConfigDir
	}
	return ""
}

func (x *ProcessStats) GetUserHomeDir() string {
	if x != nil {
		return x.UserHomeDir
	}
	return ""
}

type InfoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GOOS           string        `protobuf:"bytes,1,opt,name=GOOS,proto3" json:"GOOS,omitempty"`
	GOARCH         string        `protobuf:"bytes,2,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"`
	GOMAXPROCS     int32         `protobuf:"varint,3,opt,name=GOMAXPROCS,proto3" json:"GOMAXPROCS,omitempty"`
	NumCPU         int32         `protobuf:"varint,4,opt,name=NumCPU,proto3" json:"NumCPU,omitempty"`
	NumCgoCall     int32         `protobuf:"varint,5,opt,name=NumCgoCall,proto3" json:"NumCgoCall,omitempty"`
	NumGoroutine   int32         `protobuf:"varint,6,opt,name=NumGoroutine,proto3" json:"NumGoroutine,omitempty"`
	Version        string        `protobuf:"bytes,7,opt,name=Version,proto3" json:"Version,omitempty"`
	ProcessStats   *ProcessStats `protobuf:"bytes,8,opt,name=ProcessStats,proto3" json:"ProcessStats,omitempty"`
	MemStats       *MemStats     `protobuf:"bytes,9,opt,name=MemStats,proto3" json:"MemStats,omitempty"`
	MemProfileRate int32         `protobuf:"varint,10,opt,name=MemProfileRate,proto3" json:"MemProfileRate,omitempty"`
}

func (x *InfoType) Reset() {
	*x = InfoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoType) ProtoMessage() {}

func (x *InfoType) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoType.ProtoReflect.Descriptor instead.
func (*InfoType) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{13}
}

func (x *InfoType) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *InfoType) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *InfoType) GetGOMAXPROCS() int32 {
	if x != nil {
		return x.GOMAXPROCS
	}
	return 0
}

func (x *InfoType) GetNumCPU() int32 {
	if x != nil {
		return x.NumCPU
	}
	return 0
}

func (x *InfoType) GetNumCgoCall() int32 {
	if x != nil {
		return x.NumCgoCall
	}
	return 0
}

func (x *InfoType) GetNumGoroutine() int32 {
	if x != nil {
		return x.NumGoroutine
	}
	return 0
}

func (x *InfoType) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InfoType) GetProcessStats() *ProcessStats {
	if x != nil {
		return x.ProcessStats
	}
	return nil
}

func (x *InfoType) GetMemStats() *MemStats {
	if x != nil {
		return x.MemStats
	}
	return nil
}

func (x *InfoType) GetMemProfileRate() int32 {
	if x != nil {
		return x.MemProfileRate
	}
	return 0
}

var File_profile_proto protoreflect.FileDescriptor

var file_profile_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x49, 0x0a, 0x14, 0x4e, 0x6f, 0x6e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x5d, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x50, 0x0a, 0x16, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f,
	0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xdd, 0x06, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x53, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x4d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x72, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x46, 0x72, 0x65, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x48, 0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x70, 0x53, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x70, 0x53, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x65, 0x61,
	0x70, 0x49, 0x64, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x48, 0x65, 0x61,
	0x70, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x75,
	0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x48, 0x65, 0x61, 0x70, 0x49, 0x6e,
	0x75, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x70, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x70, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x48, 0x65,
	0x61, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x75, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x53, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x53, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x6e,
	0x75, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4d, 0x53, 0x70, 0x61, 0x6e,
	0x49, 0x6e, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x79,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4d, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x79,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x75, 0x73, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e,
	0x75, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x79, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x4d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x79,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x53, 0x79, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x53, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x43, 0x53, 0x79, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x47, 0x43, 0x53, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x65, 0x78, 0x74, 0x47, 0x43, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x65, 0x78, 0x74, 0x47, 0x43, 0x12, 0x32, 0x0a,
	0x06, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x43, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x4c, 0x61, 0x73, 0x74, 0x47,
	0x43, 0x12, 0x3d, 0x0a, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x73,
	0x12, 0x38, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x75,
	0x6d, 0x47, 0x43, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4e, 0x75, 0x6d, 0x47, 0x43,
	0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x47, 0x43, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4e, 0x75, 0x6d, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64,
	0x47, 0x43, 0x22, 0x7e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x06, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xc5, 0x04, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x1f, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x03, 0x55, 0x49, 0x44,
	0x12, 0x1f, 0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x03, 0x47, 0x49,
	0x44, 0x12, 0x21, 0x0a, 0x04, 0x45, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x45, 0x55, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x45, 0x47, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x45, 0x47, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49,
	0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x50, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x50, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x57, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x57, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x48, 0x6f,
	0x6d, 0x65, 0x44, 0x69, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x22, 0xda, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x66,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x53, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x4f, 0x4f, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x4f, 0x41,
	0x52, 0x43, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x4f, 0x41, 0x52, 0x43,
	0x48, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x4f, 0x4d, 0x41, 0x58, 0x50, 0x52, 0x4f, 0x43, 0x53, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x4f, 0x4d, 0x41, 0x58, 0x50, 0x52, 0x4f, 0x43,
	0x53, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x43, 0x50, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x43, 0x50, 0x55, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d,
	0x43, 0x67, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e,
	0x75, 0x6d, 0x43, 0x67, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x75, 0x6d,
	0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4e, 0x75, 0x6d, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2b, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x08, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x2a, 0x69, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x2a, 0x87, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x65, 0x61, 0x70, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x6f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x2a, 0x3c, 0x0a, 0x10, 0x4e, 0x6f,
	0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x50, 0x55,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x10, 0x01, 0x32, 0xf5, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x75, 0x6d, 0x70,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x03,
	0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x02, 0x47, 0x43, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x4e, 0x6f, 0x6e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_profile_proto_rawDescOnce sync.Once
	file_profile_proto_rawDescData = file_profile_proto_rawDesc
)

func file_profile_proto_rawDescGZIP() []byte {
	file_profile_proto_rawDescOnce.Do(func() {
		file_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_profile_proto_rawDescData)
	})
	return file_profile_proto_rawDescData
}

var file_profile_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_profile_proto_goTypes = []interface{}{
	(ProfileVariable)(0),              // 0: proto.ProfileVariable
	(LookupProfile)(0),                // 1: proto.LookupProfile
	(NonLookupProfile)(0),             // 2: proto.NonLookupProfile
	(*FileChunk)(nil),                 // 3: proto.FileChunk
	(*StringType)(nil),                // 4: proto.StringType
	(*IntType)(nil),                   // 5: proto.IntType
	(*LookupProfileType)(nil),         // 6: proto.LookupProfileType
	(*NonLookupProfileType)(nil),      // 7: proto.NonLookupProfileType
	(*SetProfileInputType)(nil),       // 8: proto.SetProfileInputType
	(*ResetProfileInputType)(nil),     // 9: proto.ResetProfileInputType
	(*LookupProfileInputType)(nil),    // 10: proto.LookupProfileInputType
	(*NonLookupProfileInputType)(nil), // 11: proto.NonLookupProfileInputType
	(*MemStats)(nil),                  // 12: proto.MemStats
	(*FileInfo)(nil),                  // 13: proto.FileInfo
	(*IDName)(nil),                    // 14: proto.IDName
	(*ProcessStats)(nil),              // 15: proto.ProcessStats
	(*InfoType)(nil),                  // 16: proto.InfoType
	(*duration.Duration)(nil),         // 17: google.protobuf.Duration
	(*timestamp.Timestamp)(nil),       // 18: google.protobuf.Timestamp
	(*empty.Empty)(nil),               // 19: google.protobuf.Empty
}
var file_profile_proto_depIdxs = []int32{
	1,  // 0: proto.LookupProfileType.Profile:type_name -> proto.LookupProfile
	2,  // 1: proto.NonLookupProfileType.Profile:type_name -> proto.NonLookupProfile
	0,  // 2: proto.SetProfileInputType.Variable:type_name -> proto.ProfileVariable
	0,  // 3: proto.ResetProfileInputType.Variable:type_name -> proto.ProfileVariable
	1,  // 4: proto.LookupProfileInputType.ProfileType:type_name -> proto.LookupProfile
	2,  // 5: proto.NonLookupProfileInputType.ProfileType:type_name -> proto.NonLookupProfile
	17, // 6: proto.NonLookupProfileInputType.Duration:type_name -> google.protobuf.Duration
	18, // 7: proto.MemStats.LastGC:type_name -> google.protobuf.Timestamp
	17, // 8: proto.MemStats.PauseTotalNs:type_name -> google.protobuf.Duration
	18, // 9: proto.MemStats.LastPause:type_name -> google.protobuf.Timestamp
	18, // 10: proto.FileInfo.ModeTime:type_name -> google.protobuf.Timestamp
	13, // 11: proto.ProcessStats.ExecutableLStat:type_name -> proto.FileInfo
	13, // 12: proto.ProcessStats.ExecutableStat:type_name -> proto.FileInfo
	14, // 13: proto.ProcessStats.UID:type_name -> proto.IDName
	14, // 14: proto.ProcessStats.GID:type_name -> proto.IDName
	14, // 15: proto.ProcessStats.EUID:type_name -> proto.IDName
	14, // 16: proto.ProcessStats.EGID:type_name -> proto.IDName
	14, // 17: proto.ProcessStats.Groups:type_name -> proto.IDName
	15, // 18: proto.InfoType.ProcessStats:type_name -> proto.ProcessStats
	12, // 19: proto.InfoType.MemStats:type_name -> proto.MemStats
	19, // 20: proto.ProfileService.Ping:input_type -> google.protobuf.Empty
	19, // 21: proto.ProfileService.GetInfo:input_type -> google.protobuf.Empty
	19, // 22: proto.ProfileService.BinaryDump:input_type -> google.protobuf.Empty
	8,  // 23: proto.ProfileService.Set:input_type -> proto.SetProfileInputType
	19, // 24: proto.ProfileService.GC:input_type -> google.protobuf.Empty
	10, // 25: proto.ProfileService.LookupProfile:input_type -> proto.LookupProfileInputType
	11, // 26: proto.ProfileService.NonLookupProfile:input_type -> proto.NonLookupProfileInputType
	7,  // 27: proto.ProfileService.StopNonLookupProfile:input_type -> proto.NonLookupProfileType
	4,  // 28: proto.ProfileService.Ping:output_type -> proto.StringType
	16, // 29: proto.ProfileService.GetInfo:output_type -> proto.InfoType
	3,  // 30: proto.ProfileService.BinaryDump:output_type -> proto.FileChunk
	5,  // 31: proto.ProfileService.Set:output_type -> proto.IntType
	19, // 32: proto.ProfileService.GC:output_type -> google.protobuf.Empty
	3,  // 33: proto.ProfileService.LookupProfile:output_type -> proto.FileChunk
	3,  // 34: proto.ProfileService.NonLookupProfile:output_type -> proto.FileChunk
	19, // 35: proto.ProfileService.StopNonLookupProfile:output_type -> google.protobuf.Empty
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_profile_proto_init() }
func file_profile_proto_init() {
	if File_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupProfileType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonLookupProfileType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileInputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetProfileInputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupProfileInputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonLookupProfileInputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_profile_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_profile_proto_goTypes,
		DependencyIndexes: file_profile_proto_depIdxs,
		EnumInfos:         file_profile_proto_enumTypes,
		MessageInfos:      file_profile_proto_msgTypes,
	}.Build()
	File_profile_proto = out.File
	file_profile_proto_rawDesc = nil
	file_profile_proto_goTypes = nil
	file_profile_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileServiceClient interface {
	// Test
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringType, error)
	// Info
	GetInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InfoType, error)
	// BinaryDump
	BinaryDump(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ProfileService_BinaryDumpClient, error)
	// Variable
	Set(ctx context.Context, in *SetProfileInputType, opts ...grpc.CallOption) (*IntType, error)
	// GC
	GC(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lookup Profile
	LookupProfile(ctx context.Context, in *LookupProfileInputType, opts ...grpc.CallOption) (ProfileService_LookupProfileClient, error)
	// Non Lookup Profile
	NonLookupProfile(ctx context.Context, in *NonLookupProfileInputType, opts ...grpc.CallOption) (ProfileService_NonLookupProfileClient, error)
	StopNonLookupProfile(ctx context.Context, in *NonLookupProfileType, opts ...grpc.CallOption) (*empty.Empty, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringType, error) {
	out := new(StringType)
	err := c.cc.Invoke(ctx, "/proto.ProfileService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InfoType, error) {
	out := new(InfoType)
	err := c.cc.Invoke(ctx, "/proto.ProfileService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) BinaryDump(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ProfileService_BinaryDumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[0], "/proto.ProfileService/BinaryDump", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceBinaryDumpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_BinaryDumpClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type profileServiceBinaryDumpClient struct {
	grpc.ClientStream
}

func (x *profileServiceBinaryDumpClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) Set(ctx context.Context, in *SetProfileInputType, opts ...grpc.CallOption) (*IntType, error) {
	out := new(IntType)
	err := c.cc.Invoke(ctx, "/proto.ProfileService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GC(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.ProfileService/GC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) LookupProfile(ctx context.Context, in *LookupProfileInputType, opts ...grpc.CallOption) (ProfileService_LookupProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[1], "/proto.ProfileService/LookupProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceLookupProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_LookupProfileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type profileServiceLookupProfileClient struct {
	grpc.ClientStream
}

func (x *profileServiceLookupProfileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) NonLookupProfile(ctx context.Context, in *NonLookupProfileInputType, opts ...grpc.CallOption) (ProfileService_NonLookupProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[2], "/proto.ProfileService/NonLookupProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceNonLookupProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_NonLookupProfileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type profileServiceNonLookupProfileClient struct {
	grpc.ClientStream
}

func (x *profileServiceNonLookupProfileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) StopNonLookupProfile(ctx context.Context, in *NonLookupProfileType, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.ProfileService/StopNonLookupProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
type ProfileServiceServer interface {
	// Test
	Ping(context.Context, *empty.Empty) (*StringType, error)
	// Info
	GetInfo(context.Context, *empty.Empty) (*InfoType, error)
	// BinaryDump
	BinaryDump(*empty.Empty, ProfileService_BinaryDumpServer) error
	// Variable
	Set(context.Context, *SetProfileInputType) (*IntType, error)
	// GC
	GC(context.Context, *empty.Empty) (*empty.Empty, error)
	// Lookup Profile
	LookupProfile(*LookupProfileInputType, ProfileService_LookupProfileServer) error
	// Non Lookup Profile
	NonLookupProfile(*NonLookupProfileInputType, ProfileService_NonLookupProfileServer) error
	StopNonLookupProfile(context.Context, *NonLookupProfileType) (*empty.Empty, error)
}

// UnimplementedProfileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (*UnimplementedProfileServiceServer) Ping(context.Context, *empty.Empty) (*StringType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedProfileServiceServer) GetInfo(context.Context, *empty.Empty) (*InfoType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedProfileServiceServer) BinaryDump(*empty.Empty, ProfileService_BinaryDumpServer) error {
	return status.Errorf(codes.Unimplemented, "method BinaryDump not implemented")
}
func (*UnimplementedProfileServiceServer) Set(context.Context, *SetProfileInputType) (*IntType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedProfileServiceServer) GC(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GC not implemented")
}
func (*UnimplementedProfileServiceServer) LookupProfile(*LookupProfileInputType, ProfileService_LookupProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupProfile not implemented")
}
func (*UnimplementedProfileServiceServer) NonLookupProfile(*NonLookupProfileInputType, ProfileService_NonLookupProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method NonLookupProfile not implemented")
}
func (*UnimplementedProfileServiceServer) StopNonLookupProfile(context.Context, *NonLookupProfileType) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNonLookupProfile not implemented")
}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProfileService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProfileService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_BinaryDump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).BinaryDump(m, &profileServiceBinaryDumpServer{stream})
}

type ProfileService_BinaryDumpServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type profileServiceBinaryDumpServer struct {
	grpc.ServerStream
}

func (x *profileServiceBinaryDumpServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfileInputType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProfileService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Set(ctx, req.(*SetProfileInputType))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProfileService/GC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GC(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_LookupProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LookupProfileInputType)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).LookupProfile(m, &profileServiceLookupProfileServer{stream})
}

type ProfileService_LookupProfileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type profileServiceLookupProfileServer struct {
	grpc.ServerStream
}

func (x *profileServiceLookupProfileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_NonLookupProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NonLookupProfileInputType)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).NonLookupProfile(m, &profileServiceNonLookupProfileServer{stream})
}

type ProfileService_NonLookupProfileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type profileServiceNonLookupProfileServer struct {
	grpc.ServerStream
}

func (x *profileServiceNonLookupProfileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_StopNonLookupProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonLookupProfileType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).StopNonLookupProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProfileService/StopNonLookupProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).StopNonLookupProfile(ctx, req.(*NonLookupProfileType))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ProfileService_Ping_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _ProfileService_GetInfo_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ProfileService_Set_Handler,
		},
		{
			MethodName: "GC",
			Handler:    _ProfileService_GC_Handler,
		},
		{
			MethodName: "StopNonLookupProfile",
			Handler:    _ProfileService_StopNonLookupProfile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BinaryDump",
			Handler:       _ProfileService_BinaryDump_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LookupProfile",
			Handler:       _ProfileService_LookupProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NonLookupProfile",
			Handler:       _ProfileService_NonLookupProfile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "profile.proto",
}
