// Code generated by protoc-gen-go. DO NOT EDIT.
// source: profile.proto

package grpc_profile

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_Unknown StatusCode = 0
	StatusCode_OK      StatusCode = 1
	StatusCode_Failed  StatusCode = 2
)

var StatusCode_name = map[int32]string{
	0: "Unknown",
	1: "OK",
	2: "Failed",
}

var StatusCode_value = map[string]int32{
	"Unknown": 0,
	"OK":      1,
	"Failed":  2,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{0}
}

type FileChunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{0}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Status struct {
	Code                 StatusCode `protobuf:"varint,1,opt,name=Code,proto3,enum=profile.StatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{1}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_Unknown
}

type Rate struct {
	Value                int64    `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rate) Reset()         { *m = Rate{} }
func (m *Rate) String() string { return proto.CompactTextString(m) }
func (*Rate) ProtoMessage()    {}
func (*Rate) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{2}
}

func (m *Rate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rate.Unmarshal(m, b)
}
func (m *Rate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rate.Marshal(b, m, deterministic)
}
func (m *Rate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rate.Merge(m, src)
}
func (m *Rate) XXX_Size() int {
	return xxx_messageInfo_Rate.Size(m)
}
func (m *Rate) XXX_DiscardUnknown() {
	xxx_messageInfo_Rate.DiscardUnknown(m)
}

var xxx_messageInfo_Rate proto.InternalMessageInfo

func (m *Rate) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("profile.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*FileChunk)(nil), "profile.FileChunk")
	proto.RegisterType((*Status)(nil), "profile.Status")
	proto.RegisterType((*Rate)(nil), "profile.Rate")
}

func init() {
	proto.RegisterFile("profile.proto", fileDescriptor_744bf7a47b381504)
}

var fileDescriptor_744bf7a47b381504 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4b, 0x4b, 0xfb, 0x40,
	0x14, 0xc5, 0xfb, 0xfa, 0xa7, 0xfc, 0xaf, 0xb6, 0xc6, 0xa9, 0x8f, 0x5a, 0x5d, 0x48, 0x40, 0x14,
	0xa1, 0x53, 0xac, 0x88, 0x8b, 0x82, 0x48, 0xab, 0xdd, 0x88, 0x28, 0x09, 0xba, 0x70, 0x97, 0xa6,
	0xb7, 0x35, 0x64, 0x3a, 0x13, 0xd2, 0x89, 0x8f, 0x0f, 0xe0, 0xf7, 0x96, 0xcc, 0x24, 0x0a, 0xc6,
	0x45, 0x5c, 0x9e, 0xb9, 0xf7, 0x77, 0xce, 0x19, 0x2e, 0x34, 0xc2, 0x48, 0xcc, 0x7c, 0x86, 0x34,
	0x8c, 0x84, 0x14, 0xa4, 0x9e, 0xca, 0xce, 0xee, 0x5c, 0x88, 0x39, 0xc3, 0x9e, 0x7a, 0x9e, 0xc4,
	0xb3, 0x1e, 0x2e, 0x42, 0xf9, 0xae, 0xb7, 0xac, 0x03, 0xf8, 0x3f, 0xf6, 0x19, 0x8e, 0x9e, 0x63,
	0x1e, 0x90, 0x36, 0xd4, 0x47, 0x82, 0x4b, 0xe4, 0xb2, 0x5d, 0xde, 0x2f, 0x1f, 0xad, 0xda, 0x99,
	0xb4, 0x4e, 0xc0, 0x70, 0xa4, 0x2b, 0xe3, 0x25, 0x39, 0x84, 0xda, 0x48, 0x4c, 0x51, 0x2d, 0x34,
	0xfb, 0x2d, 0x9a, 0x85, 0xea, 0x71, 0x32, 0xb2, 0xd5, 0x82, 0xb5, 0x07, 0x35, 0xdb, 0x95, 0x48,
	0x36, 0xe0, 0xdf, 0xa3, 0xcb, 0x62, 0x4d, 0x54, 0x6d, 0x2d, 0x8e, 0xbb, 0x00, 0xdf, 0x04, 0x59,
	0x81, 0xfa, 0x03, 0x0f, 0xb8, 0x78, 0xe5, 0x66, 0x89, 0x18, 0x50, 0xb9, 0xbb, 0x31, 0xcb, 0x04,
	0xc0, 0x18, 0xbb, 0x3e, 0xc3, 0xa9, 0x59, 0xe9, 0x7f, 0x54, 0xa1, 0x79, 0xaf, 0x93, 0x1c, 0x8c,
	0x5e, 0x7c, 0x0f, 0xc9, 0x19, 0xac, 0x3b, 0x28, 0x6f, 0x71, 0x91, 0xbe, 0xab, 0xb0, 0xc6, 0x57,
	0x9f, 0x44, 0x76, 0xd6, 0x7e, 0xd4, 0xb3, 0x4a, 0x64, 0x00, 0xdb, 0x09, 0x16, 0x4b, 0x7c, 0x4b,
	0xc1, 0x71, 0xe4, 0x7a, 0xd2, 0x17, 0xbc, 0x00, 0x7c, 0x0e, 0x2d, 0x07, 0xe5, 0x90, 0x09, 0x2f,
	0xf8, 0x5b, 0xea, 0x05, 0xb4, 0x6c, 0x5c, 0xe6, 0xea, 0x6e, 0x51, 0x7d, 0x1b, 0x9a, 0xdd, 0x86,
	0x5e, 0x27, 0xb7, 0xc9, 0x39, 0x90, 0x2b, 0xd8, 0xd1, 0xfc, 0x6f, 0xbd, 0x0b, 0xbb, 0x5c, 0xc2,
	0xa6, 0x72, 0xc9, 0x7d, 0xa0, 0xa8, 0xc3, 0xd0, 0x7c, 0x6a, 0xd2, 0xc1, 0x3c, 0x0a, 0xbd, 0x6e,
	0x3a, 0x98, 0x18, 0x0a, 0x39, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x77, 0x76, 0x6c, 0x7e,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileServiceClient interface {
	SetMemProfileRate(ctx context.Context, in *Rate, opts ...grpc.CallOption) (*Status, error)
	SetMutexProfileFraction(ctx context.Context, in *Rate, opts ...grpc.CallOption) (*Status, error)
	SetBlockProfileRate(ctx context.Context, in *Rate, opts ...grpc.CallOption) (*Status, error)
	ResetMemProfileRate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error)
	ResetMutexProfileFraction(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error)
	ResetBlockProfileRate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) SetMemProfileRate(ctx context.Context, in *Rate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/SetMemProfileRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetMutexProfileFraction(ctx context.Context, in *Rate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/SetMutexProfileFraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetBlockProfileRate(ctx context.Context, in *Rate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/SetBlockProfileRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ResetMemProfileRate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/ResetMemProfileRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ResetMutexProfileFraction(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/ResetMutexProfileFraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ResetBlockProfileRate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/ResetBlockProfileRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
type ProfileServiceServer interface {
	SetMemProfileRate(context.Context, *Rate) (*Status, error)
	SetMutexProfileFraction(context.Context, *Rate) (*Status, error)
	SetBlockProfileRate(context.Context, *Rate) (*Status, error)
	ResetMemProfileRate(context.Context, *empty.Empty) (*Status, error)
	ResetMutexProfileFraction(context.Context, *empty.Empty) (*Status, error)
	ResetBlockProfileRate(context.Context, *empty.Empty) (*Status, error)
}

// UnimplementedProfileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (*UnimplementedProfileServiceServer) SetMemProfileRate(ctx context.Context, req *Rate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemProfileRate not implemented")
}
func (*UnimplementedProfileServiceServer) SetMutexProfileFraction(ctx context.Context, req *Rate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMutexProfileFraction not implemented")
}
func (*UnimplementedProfileServiceServer) SetBlockProfileRate(ctx context.Context, req *Rate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlockProfileRate not implemented")
}
func (*UnimplementedProfileServiceServer) ResetMemProfileRate(ctx context.Context, req *empty.Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMemProfileRate not implemented")
}
func (*UnimplementedProfileServiceServer) ResetMutexProfileFraction(ctx context.Context, req *empty.Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMutexProfileFraction not implemented")
}
func (*UnimplementedProfileServiceServer) ResetBlockProfileRate(ctx context.Context, req *empty.Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBlockProfileRate not implemented")
}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_SetMemProfileRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetMemProfileRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/SetMemProfileRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetMemProfileRate(ctx, req.(*Rate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetMutexProfileFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetMutexProfileFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/SetMutexProfileFraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetMutexProfileFraction(ctx, req.(*Rate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetBlockProfileRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetBlockProfileRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/SetBlockProfileRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetBlockProfileRate(ctx, req.(*Rate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ResetMemProfileRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ResetMemProfileRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/ResetMemProfileRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ResetMemProfileRate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ResetMutexProfileFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ResetMutexProfileFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/ResetMutexProfileFraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ResetMutexProfileFraction(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ResetBlockProfileRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ResetBlockProfileRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/ResetBlockProfileRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ResetBlockProfileRate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMemProfileRate",
			Handler:    _ProfileService_SetMemProfileRate_Handler,
		},
		{
			MethodName: "SetMutexProfileFraction",
			Handler:    _ProfileService_SetMutexProfileFraction_Handler,
		},
		{
			MethodName: "SetBlockProfileRate",
			Handler:    _ProfileService_SetBlockProfileRate_Handler,
		},
		{
			MethodName: "ResetMemProfileRate",
			Handler:    _ProfileService_ResetMemProfileRate_Handler,
		},
		{
			MethodName: "ResetMutexProfileFraction",
			Handler:    _ProfileService_ResetMutexProfileFraction_Handler,
		},
		{
			MethodName: "ResetBlockProfileRate",
			Handler:    _ProfileService_ResetBlockProfileRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile.proto",
}
